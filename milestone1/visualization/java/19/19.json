{"repo": "google/gson", "path": "gson/src/main/java/com/google/gson/internal/Streams.java", "func_name": "Streams.parse", "original_string": "public static JsonElement parse(JsonReader reader) throws JsonParseException {\n    boolean isEmpty = true;\n    try {\n      reader.peek();\n      isEmpty = false;\n      return TypeAdapters.JSON_ELEMENT.read(reader);\n    } catch (EOFException e) {\n      /*\n       * For compatibility with JSON 1.5 and earlier, we return a JsonNull for\n       * empty documents instead of throwing.\n       */\n      if (isEmpty) {\n        return JsonNull.INSTANCE;\n      }\n      // The stream ended prematurely so it is likely a syntax error.\n      throw new JsonSyntaxException(e);\n    } catch (MalformedJsonException e) {\n      throw new JsonSyntaxException(e);\n    } catch (IOException e) {\n      throw new JsonIOException(e);\n    } catch (NumberFormatException e) {\n      throw new JsonSyntaxException(e);\n    }\n  }", "language": "java", "code": "public static JsonElement parse(JsonReader reader) throws JsonParseException {\n    boolean isEmpty = true;\n    try {\n      reader.peek();\n      isEmpty = false;\n      return TypeAdapters.JSON_ELEMENT.read(reader);\n    } catch (EOFException e) {\n      /*\n       * For compatibility with JSON 1.5 and earlier, we return a JsonNull for\n       * empty documents instead of throwing.\n       */\n      if (isEmpty) {\n        return JsonNull.INSTANCE;\n      }\n      // The stream ended prematurely so it is likely a syntax error.\n      throw new JsonSyntaxException(e);\n    } catch (MalformedJsonException e) {\n      throw new JsonSyntaxException(e);\n    } catch (IOException e) {\n      throw new JsonIOException(e);\n    } catch (NumberFormatException e) {\n      throw new JsonSyntaxException(e);\n    }\n  }", "code_tokens": ["public", "static", "JsonElement", "parse", "(", "JsonReader", "reader", ")", "throws", "JsonParseException", "{", "boolean", "isEmpty", "=", "true", ";", "try", "{", "reader", ".", "peek", "(", ")", ";", "isEmpty", "=", "false", ";", "return", "TypeAdapters", ".", "JSON_ELEMENT", ".", "read", "(", "reader", ")", ";", "}", "catch", "(", "EOFException", "e", ")", "{", "/*\n       * For compatibility with JSON 1.5 and earlier, we return a JsonNull for\n       * empty documents instead of throwing.\n       */", "if", "(", "isEmpty", ")", "{", "return", "JsonNull", ".", "INSTANCE", ";", "}", "// The stream ended prematurely so it is likely a syntax error.", "throw", "new", "JsonSyntaxException", "(", "e", ")", ";", "}", "catch", "(", "MalformedJsonException", "e", ")", "{", "throw", "new", "JsonSyntaxException", "(", "e", ")", ";", "}", "catch", "(", "IOException", "e", ")", "{", "throw", "new", "JsonIOException", "(", "e", ")", ";", "}", "catch", "(", "NumberFormatException", "e", ")", "{", "throw", "new", "JsonSyntaxException", "(", "e", ")", ";", "}", "}"], "docstring": "Takes a reader in any state and returns the next value as a JsonElement.", "docstring_tokens": ["Takes", "a", "reader", "in", "any", "state", "and", "returns", "the", "next", "value", "as", "a", "JsonElement", "."], "sha": "63ee47cb642c8018e5cddd639aa2be143220ad4b", "url": "https://github.com/google/gson/blob/63ee47cb642c8018e5cddd639aa2be143220ad4b/gson/src/main/java/com/google/gson/internal/Streams.java#L43-L66", "partition": "train"}
