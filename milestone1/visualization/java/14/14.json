{"repo": "google/gson", "path": "gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java", "func_name": "ISO8601Utils.parseInt", "original_string": "private static int parseInt(String value, int beginIndex, int endIndex) throws NumberFormatException {\n        if (beginIndex < 0 || endIndex > value.length() || beginIndex > endIndex) {\n            throw new NumberFormatException(value);\n        }\n        // use same logic as in Integer.parseInt() but less generic we're not supporting negative values\n        int i = beginIndex;\n        int result = 0;\n        int digit;\n        if (i < endIndex) {\n            digit = Character.digit(value.charAt(i++), 10);\n            if (digit < 0) {\n                throw new NumberFormatException(\"Invalid number: \" + value.substring(beginIndex, endIndex));\n            }\n            result = -digit;\n        }\n        while (i < endIndex) {\n            digit = Character.digit(value.charAt(i++), 10);\n            if (digit < 0) {\n                throw new NumberFormatException(\"Invalid number: \" + value.substring(beginIndex, endIndex));\n            }\n            result *= 10;\n            result -= digit;\n        }\n        return -result;\n    }", "language": "java", "code": "private static int parseInt(String value, int beginIndex, int endIndex) throws NumberFormatException {\n        if (beginIndex < 0 || endIndex > value.length() || beginIndex > endIndex) {\n            throw new NumberFormatException(value);\n        }\n        // use same logic as in Integer.parseInt() but less generic we're not supporting negative values\n        int i = beginIndex;\n        int result = 0;\n        int digit;\n        if (i < endIndex) {\n            digit = Character.digit(value.charAt(i++), 10);\n            if (digit < 0) {\n                throw new NumberFormatException(\"Invalid number: \" + value.substring(beginIndex, endIndex));\n            }\n            result = -digit;\n        }\n        while (i < endIndex) {\n            digit = Character.digit(value.charAt(i++), 10);\n            if (digit < 0) {\n                throw new NumberFormatException(\"Invalid number: \" + value.substring(beginIndex, endIndex));\n            }\n            result *= 10;\n            result -= digit;\n        }\n        return -result;\n    }", "code_tokens": ["private", "static", "int", "parseInt", "(", "String", "value", ",", "int", "beginIndex", ",", "int", "endIndex", ")", "throws", "NumberFormatException", "{", "if", "(", "beginIndex", "<", "0", "||", "endIndex", ">", "value", ".", "length", "(", ")", "||", "beginIndex", ">", "endIndex", ")", "{", "throw", "new", "NumberFormatException", "(", "value", ")", ";", "}", "// use same logic as in Integer.parseInt() but less generic we're not supporting negative values", "int", "i", "=", "beginIndex", ";", "int", "result", "=", "0", ";", "int", "digit", ";", "if", "(", "i", "<", "endIndex", ")", "{", "digit", "=", "Character", ".", "digit", "(", "value", ".", "charAt", "(", "i", "++", ")", ",", "10", ")", ";", "if", "(", "digit", "<", "0", ")", "{", "throw", "new", "NumberFormatException", "(", "\"Invalid number: \"", "+", "value", ".", "substring", "(", "beginIndex", ",", "endIndex", ")", ")", ";", "}", "result", "=", "-", "digit", ";", "}", "while", "(", "i", "<", "endIndex", ")", "{", "digit", "=", "Character", ".", "digit", "(", "value", ".", "charAt", "(", "i", "++", ")", ",", "10", ")", ";", "if", "(", "digit", "<", "0", ")", "{", "throw", "new", "NumberFormatException", "(", "\"Invalid number: \"", "+", "value", ".", "substring", "(", "beginIndex", ",", "endIndex", ")", ")", ";", "}", "result", "*=", "10", ";", "result", "-=", "digit", ";", "}", "return", "-", "result", ";", "}"], "docstring": "Parse an integer located between 2 given offsets in a string\n\n@param value the string to parse\n@param beginIndex the start index for the integer in the string\n@param endIndex the end index for the integer in the string\n@return the int\n@throws NumberFormatException if the value is not a number", "docstring_tokens": ["Parse", "an", "integer", "located", "between", "2", "given", "offsets", "in", "a", "string"], "sha": "63ee47cb642c8018e5cddd639aa2be143220ad4b", "url": "https://github.com/google/gson/blob/63ee47cb642c8018e5cddd639aa2be143220ad4b/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java#L300-L324", "partition": "train"}
