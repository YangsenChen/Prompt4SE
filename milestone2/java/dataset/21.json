{
  "repo": "wildfly/wildfly",
  "path": "ejb3/src/main/java/org/jboss/as/ejb3/security/AuthorizationInterceptor.java",
  "func_name": "AuthorizationInterceptor.getMethodRolesAsPrincipals",
  "original_string": "protected Set<Principal> getMethodRolesAsPrincipals() {\n        Set<Principal> methodRoles = new HashSet<Principal>();\n        if (this.ejbMethodSecurityMetaData.isDenyAll())\n            methodRoles.add(NobodyPrincipal.NOBODY_PRINCIPAL);\n        else if (this.ejbMethodSecurityMetaData.isPermitAll())\n            methodRoles.add(AnybodyPrincipal.ANYBODY_PRINCIPAL);\n        else {\n            for (String role : this.ejbMethodSecurityMetaData.getRolesAllowed())\n                methodRoles.add(new SimplePrincipal(role));\n        }\n        return methodRoles;\n    }\n\n    \n    protected MethodInterfaceType getMethodInterfaceType(MethodIntf viewType) {\n        switch (viewType) {\n            case HOME:\n                return MethodInterfaceType.Home;\n            case LOCAL_HOME:\n                return MethodInterfaceType.LocalHome;\n            case SERVICE_ENDPOINT:\n                return MethodInterfaceType.ServiceEndpoint;\n            case LOCAL:\n                return MethodInterfaceType.Local;\n            case REMOTE:\n                return MethodInterfaceType.Remote;\n            case TIMER:\n                return MethodInterfaceType.Timer;\n            case MESSAGE_ENDPOINT:\n                return MethodInterfaceType.MessageEndpoint;\n            default:\n                return null;\n        }\n    }\n\n    \n    protected String setContextID(final String contextID) {\n        if (! WildFlySecurityManager.isChecking()) {\n            final String previousID = PolicyContext.getContextID();\n            PolicyContext.setContextID(contextID);\n            return previousID;\n        } else {\n            final PrivilegedAction<String> action = new SetContextIDAction(contextID);\n            return AccessController.doPrivileged(action);\n        }\n    }\n\n   \n    private static class SetContextIDAction implements PrivilegedAction<String> {\n\n        private String contextID;\n\n        SetContextIDAction(final String contextID) {\n            this.contextID = contextID;\n        }\n\n        @Override\n        public String run() {\n            final String previousID = PolicyContext.getContextID();\n            PolicyContext.setContextID(this.contextID);\n            return previousID;\n        }\n    }\n}",
  "language": "java",
  "code": "protected Set<Principal> getMethodRolesAsPrincipals() {\n        Set<Principal> methodRoles = new HashSet<Principal>();\n        if (this.ejbMethodSecurityMetaData.isDenyAll())\n            methodRoles.add(NobodyPrincipal.NOBODY_PRINCIPAL);\n        else if (this.ejbMethodSecurityMetaData.isPermitAll())\n            methodRoles.add(AnybodyPrincipal.ANYBODY_PRINCIPAL);\n        else {\n            for (String role : this.ejbMethodSecurityMetaData.getRolesAllowed())\n                methodRoles.add(new SimplePrincipal(role));\n        }\n        return methodRoles;\n    }\n\n    /**\n     * <p>\n     * Gets the {@code MethodInterfaceType} that corresponds to the specified {@code MethodIntf}.\n     * </p>\n     *\n     * @param viewType the {@code MethodIntf} type to be converted.\n     * @return the converted type or {@code null} if the type cannot be converted.\n     */\n    protected MethodInterfaceType getMethodInterfaceType(MethodIntf viewType) {\n        switch (viewType) {\n            case HOME:\n                return MethodInterfaceType.Home;\n            case LOCAL_HOME:\n                return MethodInterfaceType.LocalHome;\n            case SERVICE_ENDPOINT:\n                return MethodInterfaceType.ServiceEndpoint;\n            case LOCAL:\n                return MethodInterfaceType.Local;\n            case REMOTE:\n                return MethodInterfaceType.Remote;\n            case TIMER:\n                return MethodInterfaceType.Timer;\n            case MESSAGE_ENDPOINT:\n                return MethodInterfaceType.MessageEndpoint;\n            default:\n                return null;\n        }\n    }\n\n    /**\n     * <p>\n     * Sets the JACC contextID using a privileged action and returns the previousID from the {@code PolicyContext}.\n     * </p>\n     *\n     * @param contextID the JACC contextID to be set.\n     * @return the previous contextID as retrieved from the {@code PolicyContext}.\n     */\n    protected String setContextID(final String contextID) {\n        if (! WildFlySecurityManager.isChecking()) {\n            final String previousID = PolicyContext.getContextID();\n            PolicyContext.setContextID(contextID);\n            return previousID;\n        } else {\n            final PrivilegedAction<String> action = new SetContextIDAction(contextID);\n            return AccessController.doPrivileged(action);\n        }\n    }\n\n    /**\n     * PrivilegedAction that sets the {@code PolicyContext} id.\n     */\n    private static class SetContextIDAction implements PrivilegedAction<String> {\n\n        private String contextID;\n\n        SetContextIDAction(final String contextID) {\n            this.contextID = contextID;\n        }\n\n        @Override\n        public String run() {\n            final String previousID = PolicyContext.getContextID();\n            PolicyContext.setContextID(this.contextID);\n            return previousID;\n        }\n    }\n}",
  "code_tokens": [
    "protected",
    "Set",
    "<",
    "Principal",
    ">",
    "getMethodRolesAsPrincipals",
    "(",
    ")",
    "{",
    "Set",
    "<",
    "Principal",
    ">",
    "methodRoles",
    "=",
    "new",
    "HashSet",
    "<",
    "Principal",
    ">",
    "(",
    ")",
    ";",
    "if",
    "(",
    "this",
    ".",
    "ejbMethodSecurityMetaData",
    ".",
    "isDenyAll",
    "(",
    ")",
    ")",
    "methodRoles",
    ".",
    "add",
    "(",
    "NobodyPrincipal",
    ".",
    "NOBODY_PRINCIPAL",
    ")",
    ";",
    "else",
    "if",
    "(",
    "this",
    ".",
    "ejbMethodSecurityMetaData",
    ".",
    "isPermitAll",
    "(",
    ")",
    ")",
    "methodRoles",
    ".",
    "add",
    "(",
    "AnybodyPrincipal",
    ".",
    "ANYBODY_PRINCIPAL",
    ")",
    ";",
    "else",
    "{",
    "for",
    "(",
    "String",
    "role",
    ":",
    "this",
    ".",
    "ejbMethodSecurityMetaData",
    ".",
    "getRolesAllowed",
    "(",
    ")",
    ")",
    "methodRoles",
    ".",
    "(",
    "new",
    "SimplePrincipal",
    "(",
    "role",
    ")",
    ")",
    ";",
    "}",
    "return",
    "methodRoles",
    ";",
    "}",
    "/**\n     * <p>\n     * Gets the {@code MethodInterfaceType} that corresponds to the specified {@code MethodIntf}.\n     * </p>\n     *\n     * @param viewType the {@code MethodIntf} type to be converted.\n     * @return the converted type or {@code null} if the type cannot be converted.\n     */",
    "protected",
    "MethodInterfaceType",
    "getMethodInterfaceType",
    "(",
    "MethodIntf",
    "viewType",
    ")",
    "{",
    "switch",
    "(",
    "viewType",
    ")",
    "{",
    "case",
    "HOME",
    ":",
    "return",
    "MethodInterfaceType",
    ".",
    "Home",
    ";",
    "case",
    "LOCAL_HOME",
    ":",
    "return",
    "MethodInterfaceType",
    ".",
    "LocalHome",
    ";",
    "case",
    "SERVICE_ENDPOINT",
    ":",
    "return",
    "MethodInterfaceType",
    ".",
    "ServiceEndpoint",
    ";",
    "case",
    "LOCAL",
    ":",
    "return",
    "MethodInterfaceType",
    ".",
    "Local",
    ";",
    "case",
    "REMOTE",
    ":",
    "return",
    "MethodInterfaceType",
    ".",
    "Remote",
    ";",
    "case",
    "TIMER",
    ":",
    "return",
    "MethodInterfaceType",
    ".",
    "Timer",
    ";",
    "case",
    "MESSAGE_ENDPOINT",
    ":",
    "return",
    "MethodInterfaceType",
    ".",
    "MessageEndpoint",
    ";",
    "default",
    ":",
    "return",
    "null",
    ";",
    "}",
    "}",
    "/**\n     * <p>\n     * Sets the JACC contextID using a privileged action and returns the previousID from the {@code PolicyContext}.\n     * </p>\n     *\n     * @param contextID the JACC contextID to be set.\n     * @return the previous contextID as retrieved from the {@code PolicyContext}.\n     */",
    "protected",
    "String",
    "setContextID",
    "(",
    "final",
    "String",
    "contextID",
    ")",
    "{",
    "if",
    "(",
    "!",
    "WildFlySecurityManager",
    ".",
    "isChecking",
    "(",
    ")",
    ")",
    "{",
    "final",
    "String",
    "previousID",
    "=",
    "PolicyContext",
    ".",
    "getContextID",
    "(",
    ")",
    ";",
    "PolicyContext",
    ".",
    "setContextID",
    "(",
    "contextID",
    ")",
    ";",
    "return",
    "previousID",
    ";",
    "}",
    "else",
    "{",
    "final",
    "PrivilegedAction",
    "<",
    "String",
    ">",
    "action",
    "=",
    "new",
    "SetContextIDAction",
    "(",
    "contextID",
    ")",
    ";",
    "return",
    "AccessController",
    ".",
    "doPrivileged",
    "(",
    "action",
    ")",
    ";",
    "}",
    "}",
    "/**\n     * PrivilegedAction that sets the {@code PolicyContext} id.\n     */",
    "private",
    "static",
    "class",
    "SetContextIDAction",
    "implements",
    "PrivilegedAction",
    "<",
    "String",
    ">",
    "{",
    "private",
    "String",
    "contextID",
    ";",
    "SetContextIDAction",
    "(",
    "final",
    "String",
    "contextID",
    ")",
    "{",
    "this",
    ".",
    "contextID",
    "=",
    "contextID",
    ";",
    "}",
    "@",
    "Override",
    "public",
    "String",
    "run",
    "(",
    ")",
    "{",
    "final",
    "String",
    "previousID",
    "=",
    "PolicyContext",
    ".",
    "getContextID",
    "(",
    ")",
    ";",
    "PolicyContext",
    ".",
    "setContextID",
    "(",
    "this",
    ".",
    "contextID",
    ")",
    ";",
    "return",
    "previousID",
    ";",
    "}",
    "}",
    "}",
    ""
  ],
  "docstring": "<p>\nReturns the method roles as a set of {@code Principal} instances. All roles specified in the method-permissions or\nvia {@code RolesAllowed} for this method are wrapped by a {@code SimplePrincipal}. If the method has been added to\nthe exclude-list or annotated with {@code DenyAll}, a NOBODY_PRINCIPAL is returned. If the method has been added\nto the unchecked list or annotated with {@code PermitAll}, an ANYBODY_PRINCIPAL is returned.\n</p>\n\n@return the constructed set of role principals.",
  "docstring_tokens": [
    "<p",
    ">",
    "Returns",
    "the",
    "method",
    "roles",
    "as",
    "a",
    "set",
    "of",
    "{",
    "@code",
    "Principal",
    "}",
    "instances",
    ".",
    "All",
    "roles",
    "specified",
    "in",
    "the",
    "method",
    "-",
    "permissions",
    "or",
    "via",
    "{",
    "@code",
    "RolesAllowed",
    "}",
    "for",
    "this",
    "method",
    "are",
    "wrapped",
    "by",
    "a",
    "{",
    "@code",
    "SimplePrincipal",
    "}",
    ".",
    "If",
    "the",
    "method",
    "has",
    "been",
    "added",
    "to",
    "the",
    "exclude",
    "-",
    "list",
    "or",
    "annotated",
    "with",
    "{",
    "@code",
    "DenyAll",
    "}",
    "a",
    "NOBODY_PRINCIPAL",
    "is",
    "returned",
    ".",
    "If",
    "the",
    "method",
    "has",
    "been",
    "added",
    "to",
    "the",
    "unchecked",
    "list",
    "or",
    "annotated",
    "with",
    "{",
    "@code",
    "PermitAll",
    "}",
    "an",
    "ANYBODY_PRINCIPAL",
    "is",
    "returned",
    ".",
    "<",
    "/",
    "p",
    ">"
  ],
  "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18",
  "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/ejb3/src/main/java/org/jboss/as/ejb3/security/AuthorizationInterceptor.java#L156-L235",
  "partition": "test"
}