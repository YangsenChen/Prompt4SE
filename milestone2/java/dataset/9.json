{
  "repo": "jcuda/jcublas",
  "path": "JCublasJava/src/main/java/jcuda/jcublas/JCublas.java",
  "func_name": "JCublas.cublasGetMatrix",
  "original_string": "public static int cublasGetMatrix (int rows, int cols, Pointer A, int lda, cuDoubleComplex B[], int offsetB, int ldb)\r\n    {\r\n        ByteBuffer byteBufferB = ByteBuffer.allocateDirect(B.length * 8 * 2);\r\n        byteBufferB.order(ByteOrder.nativeOrder());\r\n        DoubleBuffer doubleBufferB = byteBufferB.asDoubleBuffer();\r\n        int status = cublasGetMatrixNative(rows, cols, 16, A, lda, Pointer.to(doubleBufferB).withByteOffset(offsetB * 8 * 2), ldb);\r\n        if (status == cublasStatus.CUBLAS_STATUS_SUCCESS)\r\n        {\r\n            doubleBufferB.rewind();\r\n            for (int c=0; c<cols; c++)\r\n            {\r\n                for (int r=0; r<rows; r++)\r\n                {\r\n                    int index = c * ldb + r + offsetB;\r\n                    B[index].x = doubleBufferB.get(index*2+0);\r\n                    B[index].y = doubleBufferB.get(index*2+1);\r\n                }\r\n            }\r\n        }\r\n        return checkResult(status);\r\n    }",
  "language": "java",
  "code": "public static int cublasGetMatrix (int rows, int cols, Pointer A, int lda, cuDoubleComplex B[], int offsetB, int ldb)\r\n    {\r\n        ByteBuffer byteBufferB = ByteBuffer.allocateDirect(B.length * 8 * 2);\r\n        byteBufferB.order(ByteOrder.nativeOrder());\r\n        DoubleBuffer doubleBufferB = byteBufferB.asDoubleBuffer();\r\n        int status = cublasGetMatrixNative(rows, cols, 16, A, lda, Pointer.to(doubleBufferB).withByteOffset(offsetB * 8 * 2), ldb);\r\n        if (status == cublasStatus.CUBLAS_STATUS_SUCCESS)\r\n        {\r\n            doubleBufferB.rewind();\r\n            for (int c=0; c<cols; c++)\r\n            {\r\n                for (int r=0; r<rows; r++)\r\n                {\r\n                    int index = c * ldb + r + offsetB;\r\n                    B[index].x = doubleBufferB.get(index*2+0);\r\n                    B[index].y = doubleBufferB.get(index*2+1);\r\n                }\r\n            }\r\n        }\r\n        return checkResult(status);\r\n    }",
  "code_tokens": [
    "public",
    "static",
    "int",
    "cublasGetMatrix",
    "(",
    "int",
    "rows",
    ",",
    "int",
    "cols",
    ",",
    "Pointer",
    "A",
    ",",
    "int",
    "lda",
    ",",
    "cuDoubleComplex",
    "B",
    "[",
    "]",
    ",",
    "int",
    "offsetB",
    ",",
    "int",
    "ldb",
    ")",
    "{",
    "ByteBuffer",
    "byteBufferB",
    "=",
    "ByteBuffer",
    ".",
    "allocateDirect",
    "(",
    "B",
    ".",
    "length",
    "*",
    "8",
    "*",
    "2",
    ")",
    ";",
    "byteBufferB",
    ".",
    "order",
    "(",
    "ByteOrder",
    ".",
    "nativeOrder",
    "(",
    ")",
    ")",
    ";",
    "DoubleBuffer",
    "doubleBufferB",
    "=",
    "byteBufferB",
    ".",
    "asDoubleBuffer",
    "(",
    ")",
    ";",
    "int",
    "status",
    "=",
    "cublasGetMatrixNative",
    "(",
    "rows",
    ",",
    "cols",
    ",",
    "16",
    ",",
    "A",
    ",",
    "lda",
    ",",
    "Pointer",
    ".",
    "to",
    "(",
    "doubleBufferB",
    ")",
    ".",
    "withByteOffset",
    "(",
    "offsetB",
    "*",
    "8",
    "*",
    "2",
    ")",
    ",",
    "ldb",
    ")",
    ";",
    "if",
    "(",
    "status",
    "==",
    "cublasStatus",
    ".",
    "CUBLAS_STATUS_SUCCESS",
    ")",
    "{",
    "doubleBufferB",
    ".",
    "rewind",
    "(",
    ")",
    ";",
    "for",
    "(",
    "int",
    "c",
    "=",
    "0",
    ";",
    "c",
    "<",
    "cols",
    ";",
    "c",
    "++",
    ")",
    "{",
    "for",
    "(",
    "int",
    "r",
    "=",
    "0",
    ";",
    "r",
    "<",
    "rows",
    ";",
    "r",
    "++",
    ")",
    "{",
    "int",
    "index",
    "=",
    "c",
    "*",
    "ldb",
    "+",
    "r",
    "+",
    "offsetB",
    ";",
    "B",
    "[",
    "index",
    "]",
    ".",
    "x",
    "=",
    "doubleBufferB",
    ".",
    "get",
    "(",
    "index",
    "*",
    "2",
    "+",
    "0",
    ")",
    ";",
    "B",
    "[",
    "index",
    "]",
    ".",
    "y",
    "=",
    "doubleBufferB",
    ".",
    "get",
    "(",
    "index",
    "*",
    "2",
    "+",
    "1",
    ")",
    ";",
    "}",
    "}",
    "}",
    "return",
    "checkResult",
    "(",
    "status",
    ")",
    ";",
    "}"
  ],
  "docstring": "Extended wrapper for arrays of cuDoubleComplex values. Note that this method\nonly exists for convenience and compatibility with native C code. It\nis much more efficient to provide a Pointer to a double array that may\nstore the complex numbers, where each pair of consecutive numbers in\nthe array describes the real- and imaginary part of one complex number.\n\n@see JCublas#cublasGetMatrix(int, int, int, Pointer, int, Pointer, int)",
  "docstring_tokens": [
    "Extended",
    "wrapper",
    "for",
    "arrays",
    "of",
    "cuDoubleComplex",
    "values",
    ".",
    "Note",
    "that",
    "this",
    "method",
    "only",
    "exists",
    "for",
    "convenience",
    "and",
    "compatibility",
    "with",
    "native",
    "C",
    "code",
    ".",
    "It",
    "is",
    "much",
    "more",
    "efficient",
    "to",
    "provide",
    "a",
    "Pointer",
    "to",
    "a",
    "double",
    "array",
    "that",
    "may",
    "store",
    "the",
    "complex",
    "numbers",
    "where",
    "each",
    "pair",
    "of",
    "consecutive",
    "numbers",
    "in",
    "the",
    "array",
    "describes",
    "the",
    "real",
    "-",
    "and",
    "imaginary",
    "part",
    "of",
    "one",
    "complex",
    "number",
    "."
  ],
  "sha": "80875235d24562073f4d66651dd17263f306427d",
  "url": "https://github.com/jcuda/jcublas/blob/80875235d24562073f4d66651dd17263f306427d/JCublasJava/src/main/java/jcuda/jcublas/JCublas.java#L715-L735",
  "partition": "test"
}