{
  "repo": "buschmais/jqa-commandline-tool",
  "path": "application/src/main/java/com/buschmais/jqassistant/commandline/Main.java",
  "func_name": "Main.readProperties",
  "original_string": "private Map<String, Object> readProperties(CommandLine commandLine) throws CliConfigurationException {\n        final Properties properties = new Properties();\n        InputStream propertiesStream;\n        if (commandLine.hasOption(\"p\")) {\n            File propertyFile = new File(commandLine.getOptionValue(\"p\"));\n            if (!propertyFile.exists()) {\n                throw new CliConfigurationException(\"Property file given by command line does not exist: \" + propertyFile.getAbsolutePath());\n            }\n            try {\n                propertiesStream = new FileInputStream(propertyFile);\n            } catch (FileNotFoundException e) {\n                throw new CliConfigurationException(\"Cannot open property file.\", e);\n            }\n        } else {\n            propertiesStream = Main.class.getResourceAsStream(\"/jqassistant.properties\");\n        }\n        Map<String, Object> result = new HashMap<>();\n        if (propertiesStream != null) {\n            try {\n                properties.load(propertiesStream);\n            } catch (IOException e) {\n                throw new CliConfigurationException(\"Cannot load properties from file.\", e);\n            }\n            for (String name : properties.stringPropertyNames()) {\n                result.put(name, properties.getProperty(name));\n            }\n        }\n        return result;\n    }",
  "language": "java",
  "code": "private Map<String, Object> readProperties(CommandLine commandLine) throws CliConfigurationException {\n        final Properties properties = new Properties();\n        InputStream propertiesStream;\n        if (commandLine.hasOption(\"p\")) {\n            File propertyFile = new File(commandLine.getOptionValue(\"p\"));\n            if (!propertyFile.exists()) {\n                throw new CliConfigurationException(\"Property file given by command line does not exist: \" + propertyFile.getAbsolutePath());\n            }\n            try {\n                propertiesStream = new FileInputStream(propertyFile);\n            } catch (FileNotFoundException e) {\n                throw new CliConfigurationException(\"Cannot open property file.\", e);\n            }\n        } else {\n            propertiesStream = Main.class.getResourceAsStream(\"/jqassistant.properties\");\n        }\n        Map<String, Object> result = new HashMap<>();\n        if (propertiesStream != null) {\n            try {\n                properties.load(propertiesStream);\n            } catch (IOException e) {\n                throw new CliConfigurationException(\"Cannot load properties from file.\", e);\n            }\n            for (String name : properties.stringPropertyNames()) {\n                result.put(name, properties.getProperty(name));\n            }\n        }\n        return result;\n    }",
  "code_tokens": [
    "private",
    "Map",
    "<",
    "String",
    ",",
    "Object",
    ">",
    "readProperties",
    "(",
    "CommandLine",
    "commandLine",
    ")",
    "throws",
    "CliConfigurationException",
    "{",
    "final",
    "Properties",
    "properties",
    "=",
    "new",
    "Properties",
    "(",
    ")",
    ";",
    "InputStream",
    "propertiesStream",
    ";",
    "if",
    "(",
    "commandLine",
    ".",
    "hasOption",
    "(",
    "\"p\"",
    ")",
    ")",
    "{",
    "File",
    "propertyFile",
    "=",
    "new",
    "File",
    "(",
    "commandLine",
    ".",
    "getOptionValue",
    "(",
    "\"p\"",
    ")",
    ")",
    ";",
    "if",
    "(",
    "!",
    "propertyFile",
    ".",
    "exists",
    "(",
    ")",
    ")",
    "{",
    "throw",
    "new",
    "CliConfigurationException",
    "(",
    "\"Property file given by command line does not exist: \"",
    "+",
    "propertyFile",
    ".",
    "getAbsolutePath",
    "(",
    ")",
    ")",
    ";",
    "}",
    "try",
    "{",
    "propertiesStream",
    "=",
    "new",
    "FileInputStream",
    "(",
    "propertyFile",
    ")",
    ";",
    "}",
    "catch",
    "(",
    "FileNotFoundException",
    "e",
    ")",
    "{",
    "throw",
    "new",
    "CliConfigurationException",
    "(",
    "\"Cannot open property file.\"",
    ",",
    "e",
    ")",
    ";",
    "}",
    "}",
    "else",
    "{",
    "propertiesStream",
    "=",
    "Main",
    ".",
    "class",
    ".",
    "getResourceAsStream",
    "(",
    "\"/jqassistant.properties\"",
    ")",
    ";",
    "}",
    "Map",
    "<",
    "String",
    ",",
    "Object",
    ">",
    "result",
    "=",
    "new",
    "HashMap",
    "<>",
    "(",
    ")",
    ";",
    "if",
    "(",
    "propertiesStream",
    "!=",
    "null",
    ")",
    "{",
    "try",
    "{",
    "properties",
    ".",
    "load",
    "(",
    "propertiesStream",
    ")",
    ";",
    "}",
    "catch",
    "(",
    "IOException",
    "e",
    ")",
    "{",
    "throw",
    "new",
    "CliConfigurationException",
    "(",
    "\"Cannot load properties from file.\"",
    ",",
    "e",
    ")",
    ";",
    "}",
    "for",
    "(",
    "String",
    "name",
    ":",
    "properties",
    ".",
    "stringPropertyNames",
    "(",
    ")",
    ")",
    "{",
    "result",
    ".",
    "put",
    "(",
    "name",
    ",",
    "properties",
    ".",
    "getProperty",
    "(",
    "name",
    ")",
    ")",
    ";",
    "}",
    "}",
    "return",
    "result",
    ";",
    "}"
  ],
  "docstring": "Read the plugin properties file if specified on the command line or if it exists on the class path.\n\n@param commandLine\nThe command line.\n@return The plugin properties.\n@throws CliConfigurationException\nIf an error occurs.",
  "docstring_tokens": [
    "Read",
    "the",
    "plugin",
    "properties",
    "file",
    "if",
    "specified",
    "on",
    "the",
    "command",
    "line",
    "or",
    "if",
    "it",
    "exists",
    "on",
    "the",
    "class",
    "path",
    "."
  ],
  "sha": "c24de584ef4414fca673a75c16f4a533a188481f",
  "url": "https://github.com/buschmais/jqa-commandline-tool/blob/c24de584ef4414fca673a75c16f4a533a188481f/application/src/main/java/com/buschmais/jqassistant/commandline/Main.java#L271-L299",
  "partition": "test"
}